package com.example.printer;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.CoreProtocolPNames;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;

public class Print {
	private Context context; 
	private int quantity;
	private String filePath; 
	private String ip; 
	private byte[] totalPrintJobByte; 
	private String urlStr;//="http://192.168.0.101:631"; 
	private String urlLocStr;//="http://192.168.0.101:631/USB1_LQ";
	
	public byte[] intToByteArray(int value) {
	    return new byte[] {
	    		(byte)((value >>> 24) & 0xff),
	            (byte)((value >>> 16) & 0xff),
	            (byte)((value >>> 8) & 0xff),
	            (byte)(value & 0xff)};
	}
	
	private byte[] printerAttriByte= new byte[] {
			0x02, 0x00, //Version: 2.0
			0x00, 0x0b, //Operation-id: Get-Printer-Attributes
			0x00, 0x00, 0x00, 0x10, //Request ID: 16
			0x01, //operation-attributes-tag
			//attributes-charset: utf-8
			0x47, //Tag: Character set
			0x00, 0x12, //Name length: 18
			0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, //Name: attributes-charset
			0x00, 0x05, //Value length: 5
			0x75, 0x74, 0x66, 0x2d, 0x38, //Value: utf-8 
			//attributes-natural-language: zh-tw
			0x48, //Tag: Natural language
			0x00, 0x1b, //Name length: 27
			0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, //Name: attributes-natural-language
			0x00, 0x05, //Value length: 5
			0x7a, 0x68, 0x2d, 0x74, 0x77, //Value: zh-tw
			//printer-uri: ipp://myPrint3B. local.:631/USB1_LQ
			0x45, //Tag: URI
			0x00, 0x0b, //Name length: 11
			0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69, //Name: printer-uri
			0x00, 0x22, //Value length: 34
			0x69, 0x70, 0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x33, 0x42, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x3a, 0x36, 0x33, 0x31, 0x2f, 0x55, 0x53, 0x42, 0x31, 0x5f, 0x4c, 0x51, //Value: ipp://myPrint3B. local.:631/USB1_LQ
			//requested-attributes: copies-supported
			0x44, //Tag: Keyword
			0x00, 0x14, //Name length: 20
			0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, //Name: requested-attributes
			0x00, 0x10, //Value length: 16
			0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: copies-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x19, //Value length: 25
			0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: document-format-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x14, //Value length: 20
			0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: finishing-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x17, //Value length:23
			0x6a, 0x70, 0x65, 0x67, 0x2d, 0x6b, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: jpeg-k-octets-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x1a, //Value length: 26
			0x6a, 0x70, 0x65, 0x67, 0x2d, 0x78, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: jpeg-x-dimension-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x1a,//Value length: 26
			0x6a, 0x70, 0x65, 0x67, 0x2d, 0x79, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: jpeg-y-dimension-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x1d, //Value length: 29
			0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: media-bottom-margin-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x12, //Value length: 18
			0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x6f, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, //Value: media-col-database-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x29, //Value length: 41
			0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2d, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 
			0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, //Value: landscape-orientation-requested-preferred
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x13, //Value length: 19
			0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x6f, 0x6c, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: media-col-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x1b, //Value length: 27
			0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: media-left-margin-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x0f, //Value length: 15
			0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x79,//Value: media-col-ready
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x1c, //Value length: 28
			0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: media-right-margin-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x1a, //Value length: 26
			0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x74, 0x6f, 0x70, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: media-top-margin-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x14, //Value length: 20
			0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: operation-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x16, //Value length: 22
			0x70, 0x64, 0x66, 0x2d, 0x6b, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: pdf-k-octets-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x1a, //Value length: 26
			0x70, 0x72, 0x69, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: print-color-mode-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x17, //Value length: 23
			0x70, 0x72, 0x69, 0x6e, 0x74, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: print-quality-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x17, //Value length: 23
			0x70, 0x72, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: print-scaling-supported
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x17, //Value length: 23
			0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x75, 0x72, 0x69, //Value: printer-charge-info-uri
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x20, //Value length: 32
			0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x6a, 0x6f, 0x62, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, //Value: printer-mandatory-job-attributes
			0x44, //Tag: Keyword
			0x00, 0x00, //Name length: 0
			0x00, 0x0f, //Value length: 15
			0x73, 0x69, 0x64, 0x65, 0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, //Value: sides-supported
			0x03 //End of attributes
			}; 
			
	private byte[] printJobByte = new byte[] {
				0x02, 0x00, //Version: 2.0
				0x00, 0x02, //Operation-id: Print-Job
				0x00, 0x00, 0x00, 0x03, //Request ID: 3
				0x01, //operation-attributes-tag
				//attributes-charset: utf-8
				0x47, //Tag: Character set
				0x00, 0x12, //Name length: 18
				0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, //Name: attributes-charset
				0x00, 0x05, //Value length: 5
				0x75, 0x74, 0x66, 0x2d, 0x38, //Value: utf-8 
				//attributes-natural-language: zh-tw
				0x48, //Tag: Natural language
				0x00, 0x1b, //Name length: 27
				0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, //Name: attributes-natural-language
				0x00, 0x05, //Value length: 5
				0x7a, 0x68, 0x2d, 0x74, 0x77, //Value: zh-tw
				//printer-uri: ipp://myPrint3B. local.:631/USB1_LQ
				0x45, //Tag: URI
				0x00, 0x0b, //Name length: 11
				0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69, //Name: printer-uri
				0x00, 0x22, //Value length: 34
				0x69, 0x70, 0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x33, 0x42, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x3a, 0x36, 0x33, 0x31, 0x2f, 0x55, 0x53, 0x42, 0x31, 0x5f, 0x4c, 0x51, //Value: ipp://myPrint3B. local.:631/USB1_LQ
				//requesting-user-name: mobile
				0x42, //Tag: Name without language
				0x00, 0x14, //Name length: 20
				0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, //Name: requesting-user-name
				0x00, 0x06, //Value length: 6
				0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, //Value: mobile
				//document-format: application/pdf  ********
				0x49, //Tag: MIME media type
				0x00, 0x0f, //Name length: 15
				0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, //Name: document-format
				0x00, 0x0f, //Value length: 15  **********
				0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x64, 0x66,//Value: application/pdf  *******
				//job-name: Google
				0x42, //Tag: Name without language
				0x00, 0x08, //Name length: 8
				0x6a, 0x6f, 0x62, 0x2d, 0x6e, 0x61, 0x6d, 0x65, //Name: job-name
				0x00, 0x06, //Value length: 6
				0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, //Value: Google
				0x02, //Job attributes
				//copies: 1
				0x21, //Tag: Integer
				0x00, 0x06, //Name length: 6
				0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, //Name: copies //214~218
				0x00, 0x04, //Value length: 4 //219~220
				0x00, 0x00, 0x00, 0x01, //Value: 1 ******************* 221~224
				//media-col: 
				0x34, //Tag: Reserved (0x34) //225
				0x00, 0x09, //Name length: 9 //226~227
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x6f, 0x6c, //Name: media-col //228~
				0x00, 0x00, //Value length: 0
				//Value: 
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0; 
				0x00, 0x0a, //Value length: 10
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, //Value: media-size
				0x34, //Tag: Reserved(0x34)
				0x00, 0x00, //Name length: 0
				0x00, 0x00, //Value length: 0
				//Value:
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x0b, //Value length: 11
				0x78, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, //Value: x-dimension
				0x21, //Tag: Integer
				0x00, 0x00, //Name lengh: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x52, 0x08, //Value: 21000
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x0b, //Value length; 11
				0x79, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, //Value: y-dimension
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x74, 0x03, //Value: 29699
				0x37, //Tag: Reserved (0x37)
				0x00, 0x00, //Name length: 0
				0x00, 0x00, //Value length: 0
				//Value: 
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x13, //Value length: 19
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, //Value: media-bottom-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x01, 0x2b, //Value: 299
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x11, //Value length: 17
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, //Value: media-left-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length:0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x01, 0x3d, //Value: 317
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x12, //Value length: 18
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, //Value: media-right-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x01, 0x3d, //Value: 317
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x10, //Value length: 16
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x74, 0x6f, 0x70, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,//Value: media-top-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x00, (byte)0xb6, //Value: 182
				0x37, //Tag: Reserved (0x37)
				0x00, 0x00, //Name length: 0
				0x00, 0x00, //Value length: 0
				//Value: 
				//print-quality: 4 
				0x23, //Tag: Enum
				0x00, 0x0d, //Name length: 13
				0x70, 0x72, 0x69, 0x6e, 0x74, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, //Name: print-quality
				0x00, 0x04,//Value length: 4
				0x00, 0x00, 0x00, 0x04, //Value: 4
				//sides: one-sided
				0x44, //Tag: Keyword
				0x00, 0x05, //Name length: 5
				0x73, 0x69, 0x64, 0x65, 0x73, //Name: sides
				0x00, 0x09, //Value length: 9
				0x6f, 0x6e, 0x65, 0x2d, 0x73, 0x69, 0x64, 0x65, 0x64, //Value: one-sided
				0x03 //End of attributes	
			}; 
			
	private byte[] validateJobByte = new byte[] {
				0x02, 0x00, //Version: 2.0
				0x00, 0x04, //Operation-id: Validate-Job
				0x00, 0x00, 0x00, 0x01, //Request ID: 1
				0x01, //operation-attributes-tag
				//attributes-charset: utf-8
				0x47, //Tag: Character set
				0x00, 0x12, //Name length: 18
				0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, //Name: attributes-charset
				0x00, 0x05, //Value length: 5
				0x75, 0x74, 0x66, 0x2d, 0x38, //Value: utf-8 
				//attributes-natural-language: zh-tw
				0x48, //Tag: Natural language
				0x00, 0x1b, //Name length: 27
				0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, //Name: attributes-natural-language
				0x00, 0x05, //Value length: 5
				0x7a, 0x68, 0x2d, 0x74, 0x77, //Value: zh-tw
				//printer-uri: ipp://myPrint3B. local.:631/USB1_LQ
				0x45, //Tag: URI
				0x00, 0x0b, //Name length: 11
				0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69, //Name: printer-uri
				0x00, 0x22, //Value length: 34
				0x69, 0x70, 0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x33, 0x42, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x3a, 0x36, 0x33, 0x31, 0x2f, 0x55, 0x53, 0x42, 0x31, 0x5f, 0x4c, 0x51, //Value: ipp://myPrint3B. local.:631/USB1_LQ
				//requesting-user-name: mobile
				0x42, //Tag: Name without language
				0x00, 0x14, //Name length: 20
				0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, //Name: requesting-user-name
				0x00, 0x06, //Value length: 6
				0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, //Value: mobile
				//document-format: image/jpeg  ********
				0x49, //Tag: MIME media type
				0x00, 0x0f, //Name length: 15
				0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, //Name: document-format
//				0x00, 0x0a, //Value length: 10  **********
				0x00, 0x0f, //Value length: 15
//				0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6a, 0x70, 0x65, 0x67, //Value: image/jpeg  *******
				0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x64, 0x66, //Value: application/pdf
				0x02, //Job attributes
				//copies: 1
				0x21, //Tag: Integer
				0x00, 0x06, //Name length: 6
				0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, //Name: copies
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x00, 0x01, //Value: 1
				//media-col: 
				0x34, //Tag: Reserved (0x34)
				0x00, 0x09, //Name length: 9
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x6f, 0x6c, //Name: media-col
				0x00, 0x00, //Value length: 0
				//Value: 
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0; 
				0x00, 0x0a, //Value length: 10
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, //Value: media-size
				0x34, //Tag: Reserved(0x34)
				0x00, 0x00, //Name length: 0
				0x00, 0x00, //Value length: 0
				//Value:
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x0b, //Value length: 11
				0x78, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, //Value: x-dimension
				0x21, //Tag: Integer
				0x00, 0x00, //Name lengh: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x52, 0x08, //Value: 21000
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x0b, //Value length; 11
				0x79, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, //Value: y-dimension
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x74, 0x03, //Value: 29699
				0x37, //Tag: Reserved (0x37)
				0x00, 0x00, //Name length: 0
				0x00, 0x00, //Value length: 0
				//Value: 
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x13, //Value length: 19
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, //Value: media-bottom-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x01, 0x2b, //Value: 299
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x11, //Value length: 17
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, //Value: media-left-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length:0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x01, 0x3d, //Value: 317
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x12, //Value length: 18
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, //Value: media-right-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x01, 0x3d, //Value: 317
				0x4a, //Tag: Reserved (0x4a)
				0x00, 0x00, //Name length: 0
				0x00, 0x10, //Value length: 16
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x74, 0x6f, 0x70, 0x2d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,//Value: media-top-margin
				0x21, //Tag: Integer
				0x00, 0x00, //Name length: 0
				0x00, 0x04, //Value length: 4
				0x00, 0x00, 0x00, (byte)0xb6, //Value: 182
				0x37, //Tag: Reserved (0x37)
				0x00, 0x00, //Name length: 0
				0x00, 0x00, //Value length: 0
				//Value: 
				//print-quality: 4 
				0x23, //Tag: Enum
				0x00, 0x0d, //Name length: 13
				0x70, 0x72, 0x69, 0x6e, 0x74, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, //Name: print-quality
				0x00, 0x04,//Value length: 4
				0x00, 0x00, 0x00, 0x04, //Value: 4
				//sides: one-sided
				0x44, //Tag: Keyword
				0x00, 0x05, //Name length: 5
				0x73, 0x69, 0x64, 0x65, 0x73, //Name: sides
				0x00, 0x09, //Value length: 9
				0x6f, 0x6e, 0x65, 0x2d, 0x73, 0x69, 0x64, 0x65, 0x64, //Value: one-sided
				0x03 //End of attributes			
			};
			
	public Print(Context c, int copy, String path, String ipAddress) {
		context = c; 
		quantity = copy; 
		filePath = path; 
		ip = ipAddress; 
		urlStr = "http://"+ip+":631";
		urlLocStr = urlStr+"/USB1_LQ";
	}
	
	public void runPrintJobProcess() {
		Log.d("Alex", "quantity is: "+quantity); 
		byte[] quantityArray = intToByteArray(quantity);
		
		int j=0;
		for(int i=0; i<4; i++) { 
			printJobByte[221+j] = quantityArray[i]; 
			j++; 
		} 
		Log.d("Alex", "quantityArray is: "+quantityArray[0]);
		Log.d("Alex", "quantityArray is: "+quantityArray[1]);
		Log.d("Alex", "quantityArray is: "+quantityArray[2]);
		Log.d("Alex", "quantityArray is: "+quantityArray[3]); 

		Log.d("Alex", "printJobByte[218] is: "+printJobByte[218]);
		Log.d("Alex", "printJobByte[219] is: "+printJobByte[219]);
		Log.d("Alex", "printJobByte[220] is: "+printJobByte[220]);
		Log.d("Alex", "printJobByte[221] is: "+printJobByte[221]);
		Log.d("Alex", "printJobByte[222] is: "+printJobByte[222]); 
		Log.d("Alex", "printJobByte[223] is: "+printJobByte[223]); 
		Log.d("Alex", "printJobByte[224] is: "+printJobByte[224]); 
		Log.d("Alex", "printJobByte[225] is: "+printJobByte[225]);
		Log.d("Alex", "printJobByte[226] is: "+printJobByte[226]);
		Log.d("Alex", "printJobByte[227] is: "+printJobByte[227]);
		Log.d("Alex", "printJobByte[228] is: "+printJobByte[228]);

		File file = new File(filePath);
		Log.d("Alex", "filePath is: "+filePath);
		Log.d("Alex", "file is: "+file); 
		byte[] fileByte = convertFileToByte(file); 
		totalPrintJobByte = new byte[printJobByte.length+fileByte.length];
		System.arraycopy(printJobByte, 0, totalPrintJobByte, 0, printJobByte.length);
		System.arraycopy(fileByte, 0, totalPrintJobByte, printJobByte.length, fileByte.length);
		Thread threadSendPrintJob =new Thread(sendPrintJob); 
		threadSendPrintJob.start();
	}
	
	public void runValidateJobProcess() {
		Thread threadValidateJobAttributes = new Thread(getJobAttributes);  
		threadValidateJobAttributes.start(); 
	}
	
	public void runGetPrinterAttributeProcess() {
		Thread threadGetPrinterAttributes = new Thread(getPrinterAttributes); 
		threadGetPrinterAttributes.start();
	}
		
		Runnable getPrinterAttributes = new Runnable () {
			public void run() {
//				while(true) {
				Log.d("Alex", "run getPrinterAttributes!"); 
				Log.d("Alex", "printerAttriByte.length is: "+printerAttriByte.length); 
				try{
					HttpClient httpClient = new DefaultHttpClient();
					HttpPost httpPost=new HttpPost(urlStr);
//					Uri myUri = Uri.parse("USB1_LQ");
					URI targetUri = URI.create(urlLocStr);
					httpPost.setURI(targetUri);
					httpPost.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Custom user agent");
					httpPost.getParams().setParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true); 
					httpPost.setHeader("Content-Type", "application/ipp");
					httpPost.setEntity(new ByteArrayEntity(printerAttriByte));
					Log.d("Alex", "printerAttriByte.length is: "+printerAttriByte.length); 
					HttpResponse httpResponse = httpClient.execute(httpPost);
//					Log.d("Alex", "getPrinterAttributes: httpResponse is: "+httpResponse.getEntity()); 
				} catch (IOException e) {
						// TODO Auto-generated catch block
					Log.d("Alex", "IOException--getPrintAttributes"); 
					e.printStackTrace();
				}

//			}
			}
		};
		
		Runnable getJobAttributes = new Runnable () {
			public void run() {
//				while(true) {
				Log.d("Alex", "run getJobAttributes!");
				Log.d("Alex", "validateJobByte.length is: "+validateJobByte.length); 
				try{
					HttpClient httpClient = new DefaultHttpClient();
					HttpPost httpPost=new HttpPost(urlStr);
//					Uri myUri = Uri.parse("USB1_LQ");
					URI targetUri = URI.create(urlLocStr);
					httpPost.setURI(targetUri);
					httpPost.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Custom user agent");
					httpPost.getParams().setParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true); 
					httpPost.setHeader("Content-Type", "application/ipp");
					httpPost.setEntity(new ByteArrayEntity(validateJobByte));
					Log.d("Alex", "validateJobByte.length is: "+validateJobByte.length); 
					HttpResponse httpResponse = httpClient.execute(httpPost);
//					Log.d("Alex", "getJobAttributes: httpResponse is: "+httpResponse.getEntity());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					Log.d("Alex", "IOException--getJobAttributes"); 
					e.printStackTrace();
				}
//			}
			}
		};
		
		Runnable sendPrintJob = new Runnable () {
			public void run() {
				Log.d("Alex", "run sendPrintJob!");
				int delimiter_length = 4 ;
				Log.d("Alex", "printJobByte.length is: "+printJobByte.length); 
				byte[] chunkLenByteArray = Integer.toHexString(printJobByte.length).getBytes(); //length in hex for each chunk's size
				int length_byte_length = chunkLenByteArray.length; 
				Log.d("Alex", "length = "+(delimiter_length+length_byte_length)); 
				Log.d("Alex", "chunk size: "+(printJobByte.length+length_byte_length+delimiter_length)); 
				try {
					URL myUrl = new URL(urlStr);

					HttpURLConnection connection = (HttpURLConnection) myUrl.openConnection();
					connection.setRequestMethod("POST");
					connection.setDoOutput(true);
					connection.setRequestProperty("Content-Type", "application/ipp");		
					connection.setChunkedStreamingMode(printJobByte.length+length_byte_length+delimiter_length);
					
					OutputStream outputStream = connection.getOutputStream();
					outputStream.write(totalPrintJobByte);
					Log.d("Alex", "totalPrintJobByte.length is: "+totalPrintJobByte.length); 
					outputStream.flush();
					outputStream.close();

	                int responseCode = connection.getResponseCode();
	                if (responseCode == HttpURLConnection.HTTP_OK) {
	                	InputStream is = connection.getInputStream();
	                	final String state = getStringFromInputStream(is);
	                	Log.d("Alex", "OK: ");
	                } 
	                else
	                    Log.d("Alex", "failed" + responseCode);
					} catch (IOException e) {
						Log.d("Alex", "IOException--sendPrintJob");
						e.printStackTrace();
					}
			}
		};
		
		
	public byte[] convertFileToByte(File file) {
		FileInputStream fileInputStream =null; 
		byte[] fileByte = null; 
		try {
			fileInputStream = new FileInputStream(file);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Log.d("Alex", "fileInputStream is: "+fileInputStream); 
	    ByteArrayOutputStream bos = new ByteArrayOutputStream();
	    byte[] buf = new byte[1024];
	    try {
	    	for (int readNum; (readNum = fileInputStream.read(buf)) != -1;) {
	            bos.write(buf, 0, readNum); //no doubt here is 0
	            //Writes len bytes from the specified byte array starting at offset off to this byte array output stream.
	            Log.d("Alex ","read: " + readNum + " bytes.");
	        }
	    } catch (IOException ex) {
	        ex.printStackTrace();
	    }
		return fileByte = bos.toByteArray();
	}
		
	public byte[] hexStringToByteArray(String s) {
	    int len = s.length();
	    byte[] data = new byte[len / 2];
	    for (int i = 0; i < len; i += 2) {
	        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
	                             + Character.digit(s.charAt(i+1), 16));
	    }
	    return data;
	}
		
	public byte[] convertPicToByte(File file) throws IOException {
		RandomAccessFile randomAccessFile = new RandomAccessFile(file, "r"); 
		try{
		long longLength = file.length(); 
		int length = (int) longLength; 
		if(length != longLength)
			throw new IOException("File size >= 2GB"); 
		byte[] byteData = new byte[length]; 
		randomAccessFile.readFully(byteData); 
		return byteData; 
		} finally {
			randomAccessFile.close(); 
		}
	}
		
	private String getStringFromInputStream(InputStream is) throws IOException {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		int len = -1;
		while ((len = is.read(buffer)) != -1) {
            os.write(buffer, 0, len);
		}
		is.close();
		String state = os.toString();
		os.close();
		return state;
	}
	
}
